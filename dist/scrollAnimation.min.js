"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _lodashThrottle = require("lodash.throttle");

var _lodashThrottle2 = _interopRequireDefault(_lodashThrottle);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var ScrollAnimation = (function (_Component) {
  _inherits(ScrollAnimation, _Component);

  _createClass(ScrollAnimation, null, [{
    key: "posTop",
    value: function posTop() {
      if (typeof window.pageYOffset !== "undefined") {
        return window.pageYOffset;
      } else if (document.documentElement.scrollTop) {
        return document.documentElement.scrollTop;
      } else if (document.body.scrollTop) {
        return document.body.scrollTop;
      }
      return 0;
    }
  }]);

  function ScrollAnimation(props) {
    _classCallCheck(this, ScrollAnimation);

    _get(Object.getPrototypeOf(ScrollAnimation.prototype), "constructor", this).call(this, props);
    var initialHide = this.props.initiallyVisible ? "" : "hidden";
    this.state = {
      classes: "animated",
      style: { "animationDuration": this.props.duration + "s", visibility: initialHide },
      lastVisibility: { partially: false, completely: false },
      timeouts: [],
      hasAnimated: false
    };
    if (window && window.addEventListener) {
      window.addEventListener("scroll", (0, _lodashThrottle2["default"])(this.handleScroll.bind(this), 200));
    }
    this.getClasses = this.getClasses.bind(this);
  }

  _createClass(ScrollAnimation, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.setState({ elementBottom: this.node.getBoundingClientRect().bottom + ScrollAnimation.posTop(),
        elementTop: this.node.getBoundingClientRect().top + ScrollAnimation.posTop() }, this.handleScroll);
      this.handleScroll();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (window && window.addEventListener) {
        window.removeEventListener("scroll", this.handleScroll.bind(this));
      }
    }
  }, {
    key: "handleScroll",
    value: function handleScroll() {
      var _this = this;

      var visible = this.isVisible();
      if (!visible.partially) {
        this.state.timeouts.forEach(function (tid) {
          clearTimeout(tid);
        });
      }
      if (visible.completely !== this.state.lastVisibility.completely || visible.partially !== this.state.lastVisibility.partially) {
        var that;
        var timeout;
        var timeouts;

        (function () {
          var style = _this.getStyle(visible);
          var classes = _this.getClasses(visible);
          that = _this;

          if (visible.partially) {
            timeout = setTimeout(function () {
              that.setState({ classes: classes, style: style, lastVisibility: visible });
            }, _this.props.delay);
            timeouts = _this.state.timeouts.slice();

            timeouts.push(timeout);
            _this.setState({ timeouts: timeouts, hasAnimated: true });
          } else {
            _this.setState({ classes: classes, style: style, lastVisibility: visible });
          }
        })();
      }
    }
  }, {
    key: "isVisible",
    value: function isVisible() {
      var viewBottom = window.scrollY + window.innerHeight;
      var viewTop = window.scrollY;
      var offset = this.props.offset;
      var elementBottom = this.state.elementBottom;
      var elementTop = this.state.elementTop;
      var middleOfView = window.scrollY + window.innerHeight / 2;
      if (elementBottom - elementTop > window.innerHeight - 2 * offset) {
        var completely = elementTop < middleOfView + offset && elementBottom > middleOfView - offset;
        var partially = completely || elementTop > middleOfView + offset && elementTop < viewBottom || elementBottom < middleOfView - offset && elementBottom > viewTop;
        return {
          completely: completely,
          partially: partially
        };
      }
      return {
        completely: elementBottom < viewBottom - offset && elementBottom > viewTop + offset && elementTop > viewTop + offset && elementTop < viewBottom - offset,
        partially: elementBottom < viewBottom && elementBottom > viewTop || elementTop > viewTop && elementTop < viewBottom
      };
    }
  }, {
    key: "getStyle",
    value: function getStyle(visible) {
      var style = { "animationDuration": this.props.duration + "s" };
      if (this.props.animateOnce && this.state.hasAnimated) return style;
      if (!visible.partially && !this.props.initiallyVisible) {
        style.visibility = "hidden";
      } else if (!visible.completely && visible.partially && !this.state.lastVisibility.partially && !this.props.initiallyVisible) {
        style.visibility = "hidden";
      }
      return style;
    }
  }, {
    key: "getClasses",
    value: function getClasses(visible) {
      var classes = "animated";
      if (this.props.animateOnce && this.state.hasAnimated) return classes;
      if (visible.completely && this.props.animateIn || visible.partially && this.state.classes.includes(this.props.animateIn) && !this.props.animateOut) {
        classes += " " + this.props.animateIn;
      } else if (visible.partially && this.state.lastVisibility.completely && this.props.animateOut) {
        classes += " " + this.props.animateOut;
      }
      return classes;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      return _react2["default"].createElement(
        "div",
        { ref: function (node) {
            _this2.node = node;
          }, className: this.state.classes, style: this.state.style },
        this.props.children
      );
    }
  }]);

  return ScrollAnimation;
})(_react.Component);

exports["default"] = ScrollAnimation;

ScrollAnimation.defaultProps = {
  offset: 100,
  duration: 1,
  initiallyVisible: false,
  delay: 0,
  animateOnce: false
};

ScrollAnimation.propTypes = {
  animateIn: _propTypes2["default"].string,
  animateOut: _propTypes2["default"].string,
  offset: _propTypes2["default"].number,
  duration: _propTypes2["default"].number,
  delay: _propTypes2["default"].number,
  initiallyVisible: _propTypes2["default"].bool,
  animateOnce: _propTypes2["default"].bool
};
module.exports = exports["default"];